var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import memoizeOne from 'memoize-one';
import { string } from 'prop-types';
import { createRootNode } from './Text';

var TextProvider = function (_Component) {
  _inherits(TextProvider, _Component);

  function TextProvider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextProvider.__proto__ || Object.getPrototypeOf(TextProvider)).call.apply(_ref, [this].concat(args))), _this), _this.getRootNode = memoizeOne(createRootNode, function (nextProps, prevProps) {
      return nextProps.element === prevProps.element;
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TextProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        parentElement: this.props.element
      };
    }

    // Must be an instance method to avoid affecting other instances memoized keys

  }, {
    key: 'render',
    value: function render() {
      var Root = this.getRootNode(this.props);

      var _props = this.props,
          ignoreParentElement = _props.parentElement,
          restProps = _objectWithoutProperties(_props, ['parentElement']);

      var rootProps = _extends({}, restProps);

      return React.createElement(Root, rootProps);
    }
  }]);

  return TextProvider;
}(Component);

TextProvider.childContextTypes = {
  parentElement: string
};
TextProvider.propTypes = {
  /** Available horizontal alignments */
  align: PropTypes.oneOf(['start', 'end', 'center', 'justify']),

  /** Available styles */
  appearance: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'mouse', 'p', 'prose']),

  /** Rendered content */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /** Color of text */
  color: PropTypes.string,

  /** The rendered HTML element, e.g. `'span'`, `'strong'` */
  element: PropTypes.string,

  /** Available font weights */
  fontWeight: PropTypes.oneOfType([PropTypes.oneOf(['regular']), PropTypes.oneOf(['semiBold']), PropTypes.oneOf(['bold']), PropTypes.oneOf(['extraBold']), PropTypes.number]),

  /** Inherit all styles from parent */
  inherit: PropTypes.bool,

  /** Remove top & bottom margins */
  noMargins: PropTypes.bool,

  /** @Private See use of context */
  parentElement: PropTypes.string,

  /** Force display to one line and truncate with ellipsis at given max-width */
  truncate: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string])
};
export default TextProvider;
import PropTypes from 'prop-types';