var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import deepEqual from 'react-fast-compare';
import TableSelectableCell from './TableSelectableCell';
import TableCell from './TableCell';
import TableRow from './TableRow';

var TableDataRow = function (_Component) {
  _inherits(TableDataRow, _Component);

  function TableDataRow() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TableDataRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableDataRow.__proto__ || Object.getPrototypeOf(TableDataRow)).call.apply(_ref, [this].concat(args))), _this), _this.toggle = function () {
      var toggle = _this.props.toggle;

      toggle && toggle(_this.props.data);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TableDataRow, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return !deepEqual(this.props, nextProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          checked = _props.checked,
          columns = _props.columns,
          data = _props.data,
          messages = _props.messages,
          toggle = _props.toggle;

      var selectable = Boolean(toggle);

      var children = columns.map(function (_ref2) {
        var key = _ref2.key,
            restColumn = _objectWithoutProperties(_ref2, ['key']);

        var cellProps = _extends({
          children: data[key]
        }, restColumn);
        return React.createElement(TableCell, _extends({ key: key }, cellProps));
      });

      if (selectable) {
        children.unshift(_jsx(TableSelectableCell, {
          checked: checked,
          disabled: data.disabled,
          label: checked ? messages.deselectRow : messages.selectRow,
          onChange: this.toggle
        }, 'selectable'));
      }

      return _jsx(TableRow, {
        isSelected: checked
      }, void 0, children);
    }
  }]);

  return TableDataRow;
}(Component);

TableDataRow.propTypes = {
  checked: PropTypes.bool,
  columns: function columns() {
    return (typeof bpfrpt_proptype_Columns === 'function' ? bpfrpt_proptype_Columns.isRequired ? bpfrpt_proptype_Columns.isRequired : bpfrpt_proptype_Columns : PropTypes.shape(bpfrpt_proptype_Columns).isRequired).apply(this, arguments);
  },
  data: function data() {
    return (typeof bpfrpt_proptype_Row === 'function' ? bpfrpt_proptype_Row.isRequired ? bpfrpt_proptype_Row.isRequired : bpfrpt_proptype_Row : PropTypes.shape(bpfrpt_proptype_Row).isRequired).apply(this, arguments);
  },
  messages: function messages() {
    return (typeof bpfrpt_proptype_Messages === 'function' ? bpfrpt_proptype_Messages.isRequired ? bpfrpt_proptype_Messages.isRequired : bpfrpt_proptype_Messages : PropTypes.shape(bpfrpt_proptype_Messages).isRequired).apply(this, arguments);
  },
  toggle: function toggle() {
    return (typeof bpfrpt_proptype_Toggle === 'function' ? bpfrpt_proptype_Toggle : PropTypes.shape(bpfrpt_proptype_Toggle)).apply(this, arguments);
  }
};
export default TableDataRow;
import { bpfrpt_proptype_Toggle } from './Selectable';
import { bpfrpt_proptype_Columns } from './Table';
import { bpfrpt_proptype_Messages } from './Table';
import { bpfrpt_proptype_Row } from './Table';
import PropTypes from 'prop-types';