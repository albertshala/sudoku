var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import debounce from 'lodash.debounce';
import { createStyledComponent } from '../styles';
import { createThemedComponent, mapComponentThemes } from '../themes';
import _OverflowContainer, { componentTheme as overflowContainerComponentTheme } from './OverflowContainer';

// prettier-ignore
export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'OverflowContainer',
    theme: overflowContainerComponentTheme(baseTheme)
  }, {
    name: 'OverflowContainerWithShadows',
    theme: {
      OverflowContainerWithShadows_boxShadowBottom: 'inset 0 -8px 8px -8px ' + baseTheme.color_gray_60 + ', inset 0 -1px ' + baseTheme.borderColor,
      OverflowContainerWithShadows_boxShadowTop: 'inset 0 8px 8px -8px ' + baseTheme.color_gray_60 + ', inset 0 1px ' + baseTheme.borderColor
    }
  }, baseTheme);
};

var ThemedOverflowContainer = createThemedComponent(_OverflowContainer, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'OverflowContainerWithShadows',
    theme: componentTheme(baseTheme)
  }, {
    name: 'OverflowContainer',
    theme: {}
  }, baseTheme);
});

var Root = createStyledComponent(ThemedOverflowContainer, function (_ref2) {
  var hasShadowBottom = _ref2.hasShadowBottom,
      hasShadowTop = _ref2.hasShadowTop,
      baseTheme = _ref2.theme;

  var theme = componentTheme(baseTheme);

  var boxShadows = [];
  hasShadowTop && boxShadows.push(theme.OverflowContainerWithShadows_boxShadowTop);
  hasShadowBottom && boxShadows.push(theme.OverflowContainerWithShadows_boxShadowBottom);
  var boxShadow = boxShadows.length ? boxShadows.join(',') : undefined;

  // [1] - 1px to avoid unwanted vertical scrollbar,
  //       1px in to avoid potentially cutting off of focus ring of
  //       subcomponents in body
  return {
    boxShadow: boxShadow,
    overflowX: 'hidden',

    paddingBottom: 2, // [1]
    paddingTop: 2 // [1]
  };
}, {
  displayName: 'OverflowContainerWithShadows',
  withProps: {
    scrollY: true
  }
});

/**
 * OverflowContainerWithShadows
 */

var OverflowContainerWithShadows = function (_Component) {
  _inherits(OverflowContainerWithShadows, _Component);

  function OverflowContainerWithShadows() {
    var _ref3;

    var _temp, _this, _ret;

    _classCallCheck(this, OverflowContainerWithShadows);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = OverflowContainerWithShadows.__proto__ || Object.getPrototypeOf(OverflowContainerWithShadows)).call.apply(_ref3, [this].concat(args))), _this), _this.state = {
      hasShadowTop: false,
      hasShadowBottom: false
    }, _this.setContainerRef = function (node) {
      _this.container = node;
    }, _this.handleScroll = function (event) {
      _this.applyShadows(event.currentTarget);
    }, _this.applyShadows = debounce(function (element) {
      _this.setState({
        hasShadowTop: element.scrollTop > 0,
        hasShadowBottom: element.scrollTop + element.clientHeight < element.scrollHeight
      });
    }, 100, { leading: true }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(OverflowContainerWithShadows, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.applyShadows(this.container);
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          hasShadowBottom = _state.hasShadowBottom,
          hasShadowTop = _state.hasShadowTop;

      var isScrollable = hasShadowBottom || hasShadowTop;
      var rootProps = _extends({
        hasShadowTop: hasShadowTop,
        hasShadowBottom: hasShadowBottom,
        innerRef: this.setContainerRef,
        onScroll: this.handleScroll,
        // Set tabIndex when scrollable so user can scroll with keyboard
        tabIndex: isScrollable ? 0 : undefined
      }, this.props);

      return React.createElement(Root, rootProps);
    }
  }]);

  return OverflowContainerWithShadows;
}(Component);

OverflowContainerWithShadows.propTypes = {
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  }
};
export default OverflowContainerWithShadows;
import PropTypes from 'prop-types';